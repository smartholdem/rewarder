#!/usr/bin/env node
const fs = require("fs");
const nconf = require("nconf");
const smartholdemApi = require("sthjs-wrapper");
const sth = require("sthjs");
const moment = require("moment");
const util = require("../api/util");

nconf.argv().file("../config.json");
LOG_FILE = "../" + nconf.get("log");
const PREFERRED_NODE = nconf.get("node");
const PASSPHRASE = nconf.get("secret");
const PORT = nconf.get("port");
if(!PASSPHRASE)
{
    console.log("Please enter the SmartHoldem Delegate passphrase");
    process.exit(1);
}

const PUBKEY = sth.crypto.getKeys(PASSPHRASE).publicKey;
const ADDR = sth.crypto.getAddress(PUBKEY);

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rewarder:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);

app.listen(PORT, () => {
    smartholdemApi.setPreferredNode(PREFERRED_NODE);
    smartholdemApi.init("main"); //main or dev

    /*
    smartholdemApi.getVoters(PUBKEY, (error, success, response) => {
        console.log(response);
    });
*/

    const PAY_PERIOD = nconf.get("payPeriod");
    console.log(fs.readFileSync("../art.txt", "utf8"));
    util.log(`Server started on port ${PORT} date:` + moment().toISOString() + "\r\n");
    util.log(`SmartHoldem Rewarder Address: ${ADDR}, Node: ${PREFERRED_NODE}` + "\r\n");



    // sthWorker.startScheduler(PAY_PERIOD, ADDR, PASSPHRASE);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
