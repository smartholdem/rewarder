#!/usr/bin/env node
const fs = require("fs");
const moment = require("moment");
const util = require("../modules/util");
const payouts = require("../payouts");
const jsonReader = require('jsonfile');
const rConfig = jsonReader.readFileSync("./config.json");
LOG_FILE = "./rewarder.log";

if (!rConfig.secret) {
    console.log("Please enter the SmartHoldem Delegate passphrase");
    process.exit(1);
}

const PUBKEY = sth.crypto.getKeys(rConfig.secret).publicKey;
const ADDR = sth.crypto.getAddress(PUBKEY);

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rewarder:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || rConfig.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);

app.listen(rConfig.port, () => {
    // const REWARD_PERIOD = "1 1 0 */1 * *";
    let rTime = rConfig.rewardTime.split(':');
    console.log(fs.readFileSync("./art.txt", "utf8"));
    util.log(`Server started on port ${rConfig.port} date:` + moment().toISOString() + "\r\n");
    util.log(`SmartHoldem Rewarder Address: ${ADDR}, Node: ${rConfig.node}:6100` + "\r\n");
    payouts.startScheduler(rTime[2] + " "+ rTime[1] + " " + rTime[0] + " */" + rConfig.rewardPeriodDays + " * *");
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
